{"version":3,"sources":["components/Zipcode.js","App.js","serviceWorker.js","index.js"],"names":["Zipcode","props","handleSubmit","event","preventDefault","axios","get","state","code","then","response","data","newczipObj","i","length","locationText","LocationText","statename","State","lat","Lat","long","Long","population","EstimatedPopulation","totalWages","TotalWages","setState","zip","catch","err","alert","display","this","className","onSubmit","type","name","placeholder","onChange","e","target","value","map","item","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"8SA2GiBA,E,kDAxGb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAMRC,aAAa,SAACC,GACVA,EAAMC,iBACNC,IAAMC,IAAI,wCAAwC,EAAKC,MAAMC,MAC5DC,MAAK,SAACC,GAGL,IAFA,IAAMC,EAAKD,EAASC,KAChBC,EAAW,GACPC,EAAE,EAAEA,EAAEF,EAAKG,OAAOD,IAEtBD,EAAWC,GAAG,CACVE,aAAaJ,EAAKE,GAAGG,aACrBC,UAAUN,EAAKE,GAAGK,MAClBC,IAAIR,EAAKE,GAAGO,IACZC,KAAKV,EAAKE,GAAGS,KACbC,WAAWZ,EAAKE,GAAGW,oBACnBC,WAAYd,EAAKE,GAAGa,YAG5B,EAAKC,SAAS,CACVC,IAAIhB,OAGTiB,OAAM,SAACC,GAAD,OAAOC,MAAM,iCA1BtB,EAAKxB,MAAM,CACPqB,IAAI,GACJpB,KAAK,IAJO,E,qDA8BT,IACDwB,EADA,OA8DR,OAtCQA,EAtBAC,KAAK1B,MAAMqB,IAAId,OAuBX,6BACI,wBAAIoB,UAAU,UAAd,kBACA,6BACJ,0BAAMA,UAAU,wCAAwCC,SAAUF,KAAK/B,cACvE,yBAAKgC,UAAU,uBACf,0BAAMA,UAAU,oBAAhB,aACI,2BAAOE,KAAK,OAAOC,KAAK,UAAWC,YAAY,YAC/CC,SAAU,SAAAC,GAAC,OAAE,EAAKb,SAAS,CAACnB,KAAKgC,EAAEC,OAAOC,SAC1CA,MAAOT,KAAK1B,MAAMC,OAElB,yBAAK0B,UAAU,sBACd,4BAAQA,UAAU,gBAAgBE,KAAK,UAAvC,aAIL,yBAAKF,UAAU,kBACVD,KAAK1B,MAAMqB,IAAIe,KAAI,SAACC,EAAK/B,GACzB,OACG,yBAAKqB,UAAU,MAAMW,IAAKhC,GAC1B,yBAAKqB,UAAU,mCAAoCW,IAAKhC,GACxD,yBAAKqB,UAAU,eAAeU,EAAK7B,cACnC,yBAAKmB,UAAU,aACf,wBAAIA,UAAU,cAAd,SAAkCU,EAAK3B,WACvC,4BACI,0CAAgB2B,EAAKzB,IAArB,IAA2ByB,EAAKvB,KAAhC,KACA,sDAA4BuB,EAAKrB,YACjC,4CAAkBqB,EAAKnB,qBA/CnC,6BACI,wBAAIS,UAAU,UAAd,kBACA,6BACJ,0BAAMA,UAAU,wCAAwCC,SAAUF,KAAK/B,cACvE,yBAAKgC,UAAU,uBACf,0BAAMA,UAAU,oBAAhB,aACI,2BAAOE,KAAK,OAAOC,KAAK,UAAWC,YAAY,YAC/CC,SAAU,SAAAC,GAAC,OAAE,EAAKb,SAAS,CAACnB,KAAKgC,EAAEC,OAAOC,SAC1CA,MAAOT,KAAK1B,MAAMC,OAElB,yBAAK0B,UAAU,sBACd,4BAAQA,UAAU,gBAAgBE,KAAK,UAAvC,YAGL,4CA6CR,yBAAKF,UAAU,OAEdF,O,GAhGac,aCcPC,E,uKARb,OACE,yBAAKb,UAAU,IACd,kBAAC,EAAD,W,GAJaY,aCMEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdjC,OAAM,SAAAkC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.15daf1ba.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from \"axios\";\r\nclass Zipcode extends Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.state={\r\n          zip:[],\r\n          code:'',\r\n        };\r\n    }\r\n    handleSubmit=(event)=>{\r\n        event.preventDefault();\r\n        axios.get(\"http://ctp-zip-api.herokuapp.com/zip/\"+this.state.code)\r\n        .then((response)=>{\r\n          const data=response.data;\r\n          let newczipObj=[]\r\n          for(let i=0;i<data.length;i++)\r\n          {\r\n              newczipObj[i]={\r\n                  locationText:data[i].LocationText,\r\n                  statename:data[i].State,\r\n                  lat:data[i].Lat,\r\n                  long:data[i].Long,\r\n                  population:data[i].EstimatedPopulation,\r\n                  totalWages: data[i].TotalWages,\r\n              };\r\n          }\r\n          this.setState({\r\n              zip:newczipObj,\r\n          });\r\n        })\r\n        .catch((err)=>alert(\"this Zipcode is not exist\"));\r\n    }\r\n    render(){\r\n        let display;\r\n        if(!this.state.zip.length){\r\n            display=(\r\n                <div >\r\n                    <h2 className=\"center\">Zipcode Search</h2>\r\n                    <br/>\r\n                <form className=\"card  border-light mb-3 width mx-auto\" onSubmit={this.handleSubmit}>\r\n                <div className=\"input-group mx-auto\">\r\n                <span className=\"input-group-text\">Zip code:</span>\r\n                    <input type=\"text\" name=\"zipcode\"  placeholder=\"Try 10017\"\r\n                    onChange={e=>this.setState({code:e.target.value})}\r\n                    value={this.state.code}\r\n                    />\r\n                    <div className=\"input-group-append\">\r\n                     <button className=\"btn btn-info \" type=\"submit\">Search</button>\r\n                     </div>\r\n                </div>\r\n                <div>No Result</div>\r\n                </form>\r\n                </div>\r\n                )\r\n        }else{\r\n            \r\n            display=(\r\n                <div >\r\n                    <h2 className=\"center\">Zipcode Search</h2>\r\n                    <br/>\r\n                <form className=\"card  border-light mb-3 width mx-auto\" onSubmit={this.handleSubmit}>\r\n                <div className=\"input-group mx-auto\">\r\n                <span className=\"input-group-text\">Zip code:</span>\r\n                    <input type=\"text\" name=\"zipcode\"  placeholder=\"Try 10017\"\r\n                    onChange={e=>this.setState({code:e.target.value})}\r\n                    value={this.state.code}\r\n                    />\r\n                    <div className=\"input-group-append\">\r\n                     <button className=\"btn btn-info \" type=\"submit\">Search</button>\r\n                     </div>\r\n                </div>\r\n                </form>\r\n                <div className=\"row row-cols-3\">\r\n                    {this.state.zip.map((item,i) => {\r\n                     return (\r\n                        <div className=\"col\" key={i}>\r\n                        <div className=\"card bg-light mb-3 width mx-auto\"  key={i}>\r\n                        <div className=\"card-header\">{item.locationText}</div>\r\n                        <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">State:{item.statename}</h5>\r\n                        <ul> \r\n                            <li>Location: ({item.lat},{item.long})</li>\r\n                            <li>Population(estimated): {item.population}</li>\r\n                            <li>Total Wages: {item.totalWages}</li>\r\n                        </ul>\r\n                        </div>\r\n                      </div>\r\n                      </div>\r\n                );\r\n                })}\r\n                </div>\r\n                </div>\r\n            )\r\n        }\r\n    return (\r\n        <div className='zip'>\r\n\r\n        {display}\r\n        \r\n        </div>\r\n    )\r\n    }\r\n\r\n\r\n  }\r\n\r\n  export default Zipcode;","import React,{Component} from 'react';\nimport './App.css';\nimport Zipcode from \"./components/Zipcode\";\n\n\n\nclass App extends Component{\n  render(){\n  return (\n    <div className=\"\">\n     <Zipcode />\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}